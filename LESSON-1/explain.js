/* Для початку ознайомся з тим що тобі потрібно зрозуміти: 
1. Тут ти будеш бачити лише пояснення щол і як працює, але перевірити або спробувати це
ти можеш у файлі: "test"
2. Для того щоб побачити який результат, скачай у VSCode
Live Server
Для цього нажми на клавіатурі: Ctrl + Shift + X
В полі пошуку пропиши: Live Server 
І якщо ти побачиш фіолетову з рожевим як антену іконку - скачуй
3. Після скачування ти побачиш Go Live у нижньому рядку - нажми на нього і тебе автоматично перенесе на веб-сайт у браузері
(3.1 Якщо побачиш папки, то нажми: LESSON-1, і далі test. Все готово, а тепер:)
4. Для того щоб побачити як працює JS на веб-сайті нажми праву кнопку миші і вибери в меню "Перевірити" або ж "Inspecter" і вибери "Консоль" або ж "Console"
5. Якщо ти бачиш у консолі Hello World - значить ти все зробив правильно
6. Усі тести в консолі і тд, я тобі рекомендую робити в папці js/test.js
7. Якщо ти важко щось будеш розуміти, то читай переклад і в думках повторюй цей переклад за кодом, для прикладу:

let Viktoriia = 17; (Дозволь Вікторій мати 17 (років/яблук/тд))
*/



















/* РОЗПОЧНЕМО НАШИЙ УРОК:

Ключове слово: LET (в перекладі з англ: дозволити)
let value = 10 (дозволь значенню бути/дорівнювати 10)


==============================================================================================
1. Ми можемо не призначувати їй значення (тобто писати оператор без дорівнює і тд.)

==============================================================================================

let value;   // (тобто ми можемо залишити його ось так)
console.log(value); // (його стан буде undefined, тому що ми нічого туди не передали)

==============================================================================================
2. Ми можемо її перезначати у її сутності (тобто змінювати її значення)

==============================================================================================

let value;   // (тобто ми можемо залишити його ось так)
console.log(value); // (його стан буде undefined, тому що ми нічого туди не передали)
value = 10 // Давай змінимо його значення
console.log(value); // (його стан буде 10, тобто як бачиш ми можемо змінити його стан з undefined на 10)

(І так ти можеш змінювати його кожного разу, та хоть так:)

let value; // (тобто ми можемо залишити його ось так)
console.log(value); // (його стан буде undefined, тому що ми нічого туди не передали)
value = 10
console.log(value); // (його стан буде 10, тобто як бачиш ми можемо змінити його стан з undefined на 10)
value = "Hello World"
console.log(value); // (його стан буде Hello World, тобто як бачиш ми можемо змінити його стан з 10 на Hello World)


Тобто ми можемо перевизначити значення далі по ходу коду (тобто змінювати його постійно коли ми з ним зустрічаємось)

=============
END - КІНЕЦЬ
=============


Ключовий оператор: = | == | === (належить/існує | приведення типів (Не строге порівняння) | Строго належить (Строге порівняння))

const = 3; // (перемінна дорівнює 3)
console.log(3 === 3); // (Чи 3 ріна/належить 3-ці) True
console.log(3 === 5); // (Чи 3 ріна/належить 5-ці) False
console.log(3 === "3"); // (Number === String - тобто, чи належить і цифра і тип до цієї 3-ки) False
console.log(3 == "3"); // (Number == Number - Чи є 3 у тексті 3?) True

=============
END - КІНЕЦЬ
=============

Метод: indexOf() (тобто якщо ми хочемо знайти індекс інших значень, то ми можемо використовувати цей метод)
Для прикладу:
"mango".indexOf("nam") 

console.log("mango".indexOf("nam")) // -1

Якщо немає такого індекса то нам поверне -1, тому що в тексті немає nam, а є man, давайте напишемо щоб глянути що тоді буде:

console.log("mango".indexOf("man")) // 0

У нас буде 0, тобто індекс такий існує у String. А тепер давайте зробимо ще інакше:

console.log("mango".indexOf(man)) // буде помилка, тому що man не є String

console.log(mango.indexOf(man)) // буде помилка, тому що це маячня, ми не шукаємо індексу, а невідомо що.

=============
END - КІНЕЦЬ
=============

1. undefined    => false
2. null         => false
3. 0            => false
4. "" або ''    => false
5. NaN          => false (NaN - Not a Number - Не число)
6. false        => false

1. "fake"       => true
2. 1            => true
3. -1           => true
4. true         => true
5. []           => true
6. {}           => true

=============
END - КІНЕЦЬ
=============

Метод Boolean() (тобто якщо ми хочемо перетворити значення в буль, то ми можемо використовувати цей метод)

console.log(Boolean(0)); // false
console.log(Boolean(1)); // true
console.log(Boolean("false")); // false
console.log(Boolean("true")); // true
console.log(Boolean(true)); // true
console.log(Boolean(false)); // false

Також щоб не писати Boolean, ми можемо написати просто !!
console.log(!!false); // false
console.log(!!"true"); // true і тд
console.log(!!"false"); // true - тому що це Str (String)


=============
END - КІНЕЦЬ
=============

console.log(Number("25.7px")); // NaN (тому що це не число, а Str)
console.log(Number(25.7px)); // Error (тому що це не число, а невідомо що)
console.log(Number(25.7)); // 27.7 (тому що це число)
*/



















/* Як підключити js до проекту
1. створіть будь який файл з форматои .html і другий файл з форматом .js
2. У файлі з форматом .html пропишіть ! і нажміть ентер, ви маєте побачити такий скелет:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JS</title>
</head>
<body>

</body>
</html>

3. У <body> напишіть <script src="(шлях до вашого js файлу)"></script>, для прикладу:
<script src="./js/test.js"></script> або якщо він не є у папці то просто:
<script src="./test.js"></script>

І все готово! :) Або ж ви можете писати просто ось так:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JS</title>
</head>
<body>
    <script>
        console.log("Hello World");
    </script>
</body>
</html>

Але такий варіант не дуже зручний, тому я рекомендую створити окремий файл і там вже писати свій код
*/














/* 
=================================
Яка різниця між var, const і let?
=================================

===========================================================================================================================================================================================
var (Уже не використовується) - Можна було його перевизначати, він був похожий до let, але був мінус в тому що він міг 'підніматися на верх'. Тобто
Якщо ми напишемо: 

console.log(a) // помилка - не можливо знайти a ПЕЕРЕД її оголошенням
let a = 10 То так ми можемо до нього достукатися лише після оголошення
console.log(a) // 10 Тому що a є позаду нас

А з варом:

console.log(a) // undefined
var a = 10 // То так ми можемо до нього достукатися після і ПЕРЕД оголошенням
console.log(a) // 10

ТОБТО де б я б не написав цей var він завжди буде іти на верх, тому з 2015 року вели const і let
===========================================================================================================================================================================================

===========================================================================================================================================================================================
const - Не може бути виконаний ДО її інсталізації (тобто перед його викликом), їх НЕ можна оголосити НЕПРИСВОЇВШИ значення, і вона не може бути перевизначена (тобто змінена):

const a; // помилка, тобто ми ЗМУШЕНІ присвоїти йому якесь значення у будь якому випадку
const a = 10 // все чудово :)
a = 15 // Помсилка, тому що ми намагаємося перевизначити константу, що є НЕМОЖЛИВИМ!
===========================================================================================================================================================================================

===========================================================================================================================================================================================
let - Не може бути виконаний ДО її інсталізації (тобто перед його викликом), але ми можемо його оголосити і не присвоювати їй значення (тобто залишити пустим), і її можна перевизначити:

let b; // undefined - все чудово :)
let b = 10; // 10 - все чудово :)
b = 15; // 15 - все чудово :)
b = ' 150'; //  150 (буде містити в собі рядочок (Str)) - все чудово :)
console.log(b) //  150 (Str)
===========================================================================================================================================================================================


=============================
Які є типи данних в JS
=============================

Є Примітивні типи даних та складні типи данних (об'єкти):

Примітивні типи данних (імутабельні* типи даних): Number, String, Boolean, Undefined, Null (, Symbol, BigInt)

let a = 10; // Number
a = a + 2; // 12 (Ми перевизначили її)
// a = 12; // 12 (Ми перевизначили її)
a += 2 // 12

Складні типи данних: Array, Object

*імутабельні - можна змінювати значення (але тип вони свій не змінюють)
**мутабельні - НЕ можна змінювати значення (const a = 10 // Тобто a ЗАВЖДИ буде 10)

*/














/* Математичні оператори 

ЗАДАЧА 1: 
Нам потрібно дізнатися скільки загалом фруктів є у нас в кошику:

const apples = 25; // (У нас є 25 яблук)
const grapes = 105; // (і 105 виноградів)
// Як ми можемо їх порахувати?
const total = apples + grapes; // (Коли ми пишемо назву змінної, насправді ми підставлюємо її значення, тобто apples це 25 і grapes це 105) тобто під капотом у нас є: total = 25 + 105 = 130
console.log(total); // 130
// А тепер давайте дізнаємось різницю між загаломом виноградів і яблук:
const diff = grapes - apples;
console.log(diff); // 80

Ось весь код:

const apples = 25;
const grapes = 105;
const total = apples + grapes;
console.log(total);
const diff = grapes - apples;
console.log(diff);



ЗАДАЧА 2 (Комбіновані оператори):
let students = 100;
students = students + 50; // students = 100 + 50
// Або можна ще коротше:
students += 50; // students + 50 (100 + 50)
console.log(students); // 150

Ось весь код:

let students = 100;
students = students + 50;
students += 50;
console.log(students);



ЗАДАЧА 3 (Пріорітети операторів):
const result = 108 + 223 - 2 * 5
console.log(result); // 321
const resultTwo = (108 + 223 - 2) * 5
console.log(resultTwo); // 1645



ЗАДАЧА 4 (Клас Math):
Math.floor | Math.ceil | Math.round | Math.trunc | Math.sign | Math.pow | Math.sqrt | Math.abs | Math.min | Math.max | Math.random | Math.sin | Math.cos | Math.tan | Math.PI

Напишіть скрипт, який виводить у консоль заукруглені вгору/вниз і т.д. значення змінної value.
Використовуй методи Math.floor(), Math.ceil() та Math.round().
Перевір що буде в консолі при значеннях 27.3 та 27.9


const value = 27.5;
console.log(Math); // Бачимо якісь типи данних - екземпляр класу Math
console.log(Math.ceil(value)); // 28 - Округлить завжди в більшу сторону значення
console.log(Math.floor(value)); // 27 - Округлить завжди в меншу сторону значення
console.log(Math.round(value)); // 28 - Округлить завжди по математичному принципу



ЗАДАЧА 5 (Шаблонні рядки):
Склади речення за допомогою шаблонних рядків A has B bots in stock.
Де A і B - змінні вставлені в рядок

const name = "Ivan";
const age = 30;

const result = name + ' years ' + age;
console.log(result);
const result_2 = `My name is ${name} and I'm ${age} years old`;
console.log(result_2);

КОНКАНТИНАЦІЯ - це об'єднання значень двох змінних / поєднання рядків, 
                тобто їхнє ДОДАВАННЯ, тобто ЦЕ ЛИШЕ + ЗАВЖДИ ЛИШЕ +


// Str являється ДОМІНУЮЧИМ типом даних (має перевагу)
const c = 10 + 22 + "11" + 44;
console.log(c); // 321144 - 10 + 22 = 32 + '11' = '3211' + 44 = '321144'

const a = 2 * "3";
conaole.log(a) // 6
conaole.log(typeof a) // number

const b = 6 - "3";
conaole.log(b) // 3
conaole.log(typeof a) // number

const value = 10
const value_2 = '15'
const res = value + value_2 // 1015
const res_2 = value - Number(value_2) // -5
const res_3 = value - value_2 // -5


const companyName = 'Cyberdyne Systems';
const repairBots = 150;
const defenceBots = 50;
const message = companyName + ' ' + 'has' + (repairBots + defenceBots) + ' ' + 'bots in stock'; // ЖАХ
console.log(message);
const message_2 = companyName + ' has ' + (repairBots + defenceBots) + ' bots in stock'; // Ні, не то блін!
console.log(message_2);
const message_3 = `${companyName} has ${repairBots + defenceBots} bots in stock`; // ІДЕАЛЬНО
console.log(message_3);



ЗАДАЧА 6 (Методи рядків та чейнінг):
Напиши скрипт, який розраховує індекс маси тіла людини. Для цього тобі необхідно розділити
вагу в кілограмах на квадрат висоти в метрах.
Вага та висота зберігаються у змінних `weight` та `height`, але не як числа, а в вигляді рядків
(спеціально для завдання). Не цілі числа можуть бути задані як дробові.

let weight = '88,3';
let height = '1.75';
console.log(weight); // 88,3
weight = weight.replace(',', '.'); // replace - замінити / змінити
console.log(weight); // 88.3
АБО Ж 
weight = Number(weight);
АБО Ж
weight = Number(weight.replace(',', '.'));
console.log(weight); // 88.3
const bmi = weight / height; // 88.3 / 1.75
console.log(bmi); // 50.457142857142856



ЗАДАЧА 7 (Оператори порівняння та приведення типів):
Яким буде результат виразів?

console.log(5 > 4); // true бо 5 більше 4-ох
console.log(10 >= '7'); // true бо 10 більше 7-ох (Num)
console.log('2' > '12'); // true бо він порівнює по КОДАХ СИМВОЛІВ (тобто це як 32 > 31)
console.log('2' < '12'); // false бо він порівнює по КОДАХ СИМВОЛІВ (тобто це як 32 < 31)
console.log('4' == 4); // true бо 4 (Num) належить до 4-ох (Num)
console.log('6' === 6); // false бо 6 (Str) не належить до 6-ох (Num)
console.log('false' === false); // false бо false (Str) не належить до false (Boolean)
console.log(1 == true); // true бо 1 (Num) це true (Boolean)
console.log(1 === true); // false бо 1 (Num) не належить true (Boolean)
console.log(0 == false); // true бо 0 (Num) це false (Boolean)
console.log('0' == false); // true бо 0 (Num) це false (Boolean)
console.log('0' === false); // false бо 0 (Str) це не false (Boolean)
console.log('Papaya' < 'papaya'); // true бо він порівнює по КОДАХ СИМВОЛІВ ("P" < "p", тобто 50 < 70)
console.log('Papaya' === 'papaya'); // false бо він порівнює по КОДАХ СИМВОЛІВ (50 === 70 + там букви одна більша а друга менша)
console.log('papa' < 'papa'); // false бо він порівнює по КОДАХ СИМВОЛІВ (70 61 70 61 < 70 61 70 61)
console.log(undefined == null); // true бо обоє повертають false
console.log(undefined === null); // false бо undefined не є однинаковим з null
console.log(5 < 4); // false бо 5 менше 4-ох
console.log(5 <= 4); // false бо 5 менше 4-ох

щоб глянути коди символів ти можеш перейти сюди:
https://unicode-table.com/en/#003



ЗАДАЧА 8 (Логічні оператори):
Яким буде результат виразів?

&& - І (і зліва і з права було true в інших випадках він верне false) (Повертає перший false або останній true)
|| - Або (Якщо true || false = true, 
          якщо false || true = true, 
          якщо false || false = false, 
          якщо true || true = true) 
        (Повертає перший true або останній false, тобто якщо воно знайде хоча б 1 true серед усіх варіантів, то він зразу верне його і далі не буде йти)

console.log(true && 3); // 3 (true)
console.log(false && 3); // false
console.log(true && 4 && 'kiwi'); // true (true && true && true)
console.log(true && 0 && 'kiwi'); // 0 (false) (true && false && true)
console.log(true || 3); // true
console.log(true || 3 || 4); // true
console.log(true || false || 4); // true
console.log('awdiawjd' || false || 4); // true
console.log(null || 2 || undefined); // true
console.log((1 && null && 2) > 0); // false ((true && false && true) > false)
console.log(null || (2 && 3) || 4); // 3 (true) (false || true || true)



ЗАДАЧА 9 (Значення за замовчуванням та оператор нульового злиття (??)):

|| - АБО вертає до 6 значень які повертають false
?? - він працює лише на 2 значення перше це null, друге - undefined

const incomingValue = 5;
// const res = incomingValue + Number('qweqweqwe'); // NaN
const res = incomingValue + Number('500'); // 500
// let test;
let test_2 = 0;
console.log(test_2);
const value = test_2 ?? 'some value' // Тут оператор || не підходить бо він підставить 'some value'
console.log(value);

console.log(res);
const defaultValue = 10; // Значення за замовчуванням
const value = res ?? defaultValue; // 5
console.log(value);

ЯКЩО ХОЧЕШ ПОПРАКТИКУВАТИСЬ БІЛЬШЕ ПЕРЕХОДЬ СЮДИ:
https://www.freecodecamp.org/learn/
*/